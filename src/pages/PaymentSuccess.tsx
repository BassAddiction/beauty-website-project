import { useEffect, useState } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import Icon from "@/components/ui/icon";

const PaymentSuccess = () => {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);
  const [subscriptionLink, setSubscriptionLink] = useState('');
  const [userEmail, setUserEmail] = useState('');
  const [userName, setUserName] = useState('');
  const [sendingEmail, setSendingEmail] = useState(false);

  useEffect(() => {
    const checkPaymentAndActivate = async () => {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–ø–æ—Å–ª–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ —Å YooKassa)
      const emailFromUrl = searchParams.get('email');
      const usernameFromUrl = searchParams.get('username');
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ localStorage –∫–∞–∫ fallback
      const email = emailFromUrl || localStorage.getItem('vpn_email');
      const username = usernameFromUrl || localStorage.getItem('vpn_username');
      
      if (!username || !email) {
        setError('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.');
        setLoading(false);
        return;
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –∏ state
      localStorage.setItem('vpn_email', email);
      localStorage.setItem('vpn_username', username);
      setUserEmail(email);
      setUserName(username);

      try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ subscriptionUrl –≤ localStorage (—Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
        const cachedSubLink = localStorage.getItem('vpn_subscription_url');
        
        if (cachedSubLink) {
          console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –ø–æ–¥–ø–∏—Å–∫–∏:', cachedSubLink);
          setSubscriptionLink(cachedSubLink);
          setSuccess(true);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–æ—Å—Ç—É–ø–∞
          if (email && cachedSubLink) {
            try {
              await fetch('https://functions.poehali.dev/02f41dd7-0d1d-4506-828c-64a917a7dda7', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  email: email,
                  subscription_url: cachedSubLink,
                  username: username
                })
              });
            } catch (emailErr) {
              console.error('Failed to send email:', emailErr);
            }
          }
        } else {
          console.log('üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è username:', username);
          
          // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
          let userResponse;
          let attempts = 0;
          const maxAttempts = 3;
          
          while (attempts < maxAttempts) {
            userResponse = await fetch(
              `https://functions.poehali.dev/d8d680b3-23f3-481e-b8cf-ccb969e2f158?username=${username}`,
              {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' }
              }
            );

            console.log(`üì° –ü–æ–ø—ã—Ç–∫–∞ ${attempts + 1}/${maxAttempts}, —Å—Ç–∞—Ç—É—Å:`, userResponse.status);

            if (userResponse.ok) {
              break;
            }
            
            if (userResponse.status === 404 && attempts < maxAttempts - 1) {
              console.log('‚è≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∂–¥—É 2 —Å–µ–∫—É–Ω–¥—ã...');
              await new Promise(resolve => setTimeout(resolve, 2000));
              attempts++;
              continue;
            }
            
            const errorText = await userResponse.text();
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', errorText);
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${errorText}`);
          }

          const userData = await userResponse.json();
          console.log('‚úÖ User data from Remnawave:', userData);
          
          const responseData = userData.response || userData;
          const subLink = responseData.subscriptionUrl || responseData.subscription_url || responseData.sub_url || userData.links?.[0] || '';
          
          if (!subLink) {
            console.error('No subscription URL found in response:', userData);
          }
          
          setSubscriptionLink(subLink);
          setSuccess(true);

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
          if (subLink) {
            localStorage.setItem('vpn_subscription_url', subLink);
          }

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–æ—Å—Ç—É–ø–∞
          if (email && subLink) {
            try {
              await fetch('https://functions.poehali.dev/02f41dd7-0d1d-4506-828c-64a917a7dda7', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  email: email,
                  subscription_url: subLink,
                  username: username
                })
              });
            } catch (emailErr) {
              console.error('Failed to send email:', emailErr);
            }
          }
        }
      } catch (err) {
        setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏');
      } finally {
        setLoading(false);
      }
    };

    checkPaymentAndActivate();
  }, [searchParams]);

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    alert('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!');
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center px-4">
        <Card className="max-w-md w-full">
          <CardContent className="pt-6">
            <div className="flex flex-col items-center gap-4">
              <Icon name="Loader2" className="w-12 h-12 animate-spin text-primary" />
              <p className="text-center text-muted-foreground">
                –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø...
              </p>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center px-4">
        <Card className="max-w-md w-full border-red-500">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-red-600">
              <Icon name="XCircle" className="w-6 h-6" />
              –û—à–∏–±–∫–∞
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <p className="text-muted-foreground">{error}</p>
            <div className="space-y-3">
              <Button onClick={() => navigate('/get-access')} className="w-full">
                –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø
              </Button>
              <Button onClick={() => navigate('/register')} variant="outline" className="w-full">
                –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (success) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center px-4 py-8">
        <Card className="max-w-2xl w-full border-green-500">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-green-600">
              <Icon name="CheckCircle" className="w-8 h-8" />
              –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="bg-green-50 dark:bg-green-950 p-4 rounded-lg">
              <p className="text-sm text-green-800 dark:text-green-200">
                ‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!
              </p>
            </div>

            <div className="space-y-3">
              <h3 className="font-semibold">–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è:</h3>
              
              <div className="space-y-2">
                <p className="text-sm text-muted-foreground">
                  <strong>–®–∞–≥ 1:</strong> –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2rayN (Windows) –∏–ª–∏ V2rayNG (Android) –∏–ª–∏ Streisand (iOS)
                </p>
                <p className="text-sm text-muted-foreground">
                  <strong>–®–∞–≥ 2:</strong> –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∏–∂–µ
                </p>
                <p className="text-sm text-muted-foreground">
                  <strong>–®–∞–≥ 3:</strong> –í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –ø–æ —Å—Å—ã–ª–∫–µ
                </p>
              </div>
            </div>

            {subscriptionLink && (
              <div className="space-y-2">
                <label className="text-sm font-medium">–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É:</label>
                <div className="flex gap-2">
                  <input
                    type="text"
                    value={subscriptionLink}
                    readOnly
                    className="flex-1 px-3 py-2 bg-muted rounded-md text-sm font-mono"
                  />
                  <Button
                    onClick={() => copyToClipboard(subscriptionLink)}
                    variant="outline"
                    size="sm"
                  >
                    <Icon name="Copy" className="w-4 h-4" />
                  </Button>
                </div>
              </div>
            )}

            <div className="bg-blue-50 dark:bg-blue-950 p-4 rounded-lg">
              <p className="text-sm text-blue-800 dark:text-blue-200">
                üí° –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É! –û–Ω–∞ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö.
              </p>
            </div>

            <div className="flex flex-col gap-3">
              <Button 
                onClick={async () => {
                  if (!userEmail || !subscriptionLink || !userName) return;
                  
                  setSendingEmail(true);
                  try {
                    await fetch('https://functions.poehali.dev/02f41dd7-0d1d-4506-828c-64a917a7dda7', {
                      method: 'POST',
                      headers: { 'Content-Type': 'application/json' },
                      body: JSON.stringify({
                        email: userEmail,
                        subscription_url: subscriptionLink,
                        username: userName
                      })
                    });
                    alert('üìß –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É.');
                  } catch (err) {
                    alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                  } finally {
                    setSendingEmail(false);
                  }
                }}
                variant="outline"
                disabled={sendingEmail}
                className="w-full"
              >
                {sendingEmail ? (
                  <>
                    <Icon name="Loader2" className="w-4 h-4 mr-2 animate-spin" />
                    –û—Ç–ø—Ä–∞–≤–∫–∞...
                  </>
                ) : (
                  <>
                    <Icon name="Mail" className="w-4 h-4 mr-2" />
                    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ
                  </>
                )}
              </Button>
              
              <Button onClick={() => navigate('/dashboard')} className="w-full button-glow">
                –ü–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return null;
};

export default PaymentSuccess;