import { useState } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import Icon from "@/components/ui/icon";
import { useNavigate } from 'react-router-dom';

const AUTH_CHECK_URL = 'https://functions.poehali.dev/833bc0dd-ad44-4b38-b1ac-2ff2f5b265e5';

const Login = () => {
  const navigate = useNavigate();
  const [username, setUsername] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!username.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    setLoading(true);
    setError('');

    try {
      console.log('üîê [User Login] Checking IP block status...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ IP –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ª–æ–≥–∏–Ω–æ–≤
      const checkResponse = await fetch(AUTH_CHECK_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action: 'check', login_type: 'user' })
      });

      console.log('üîê [User Login] IP check response:', checkResponse.status);

      if (checkResponse.status === 429) {
        const checkData = await checkResponse.json();
        console.log('üö´ [User Login] IP is blocked!', checkData);
        setError(checkData.message || '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        setLoading(false);
        return;
      }

      console.log('üîê [User Login] Checking user existence...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
      const response = await fetch(
        `https://functions.poehali.dev/c56efe3d-0219-4eab-a894-5d98f0549ef0?username=${encodeURIComponent(username.trim())}`,
        {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
        }
      );

      const data = await response.json();
      
      console.log('üîê [User Login] User check response:', response.status);

      if (response.status === 404 || !response.ok) {
        console.log('‚ùå [User Login] User not found - recording failed attempt');
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
        await fetch(AUTH_CHECK_URL, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ 
            action: 'record', 
            username: username.trim(),
            success: false,
            login_type: 'user'
          })
        });

        console.log('üîê [User Login] Rechecking IP block status after failed attempt...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ IP –ø–æ—Å–ª–µ —ç—Ç–æ–π –ø–æ–ø—ã—Ç–∫–∏
        const recheckResponse = await fetch(AUTH_CHECK_URL, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ action: 'check', login_type: 'user' })
        });

        console.log('üîê [User Login] Recheck response:', recheckResponse.status);

        if (recheckResponse.status === 429) {
          const recheckData = await recheckResponse.json();
          console.log('üö´ [User Login] IP now blocked after this attempt!', recheckData);
          setError(recheckData.message || '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫!');
        } else {
          console.log('‚ö†Ô∏è [User Login] Wrong username, but not blocked yet');
          setError(data.error || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å username.');
        }
        
        setLoading(false);
        return;
      }

      if (data.username) {
        console.log('‚úÖ [User Login] Login successful - recording success');
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
        await fetch(AUTH_CHECK_URL, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ 
            action: 'record', 
            username: username.trim(),
            success: true,
            login_type: 'user'
          })
        });
        
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–∞–±–∏–Ω–µ—Ç
        localStorage.setItem('vpn_username', username.trim());
        navigate('/dashboard');
      } else {
        console.log('‚ùå [User Login] No username in response');
        setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å username.');
        setLoading(false);
      }
    } catch (err) {
      console.error('Login error:', err);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-background flex items-center justify-center px-4">
      <Card className="w-full max-w-md">
        <CardHeader className="text-center">
          <div className="flex justify-center mb-4">
            <a href="/" className="transition-transform hover:scale-105">
              <img 
                src="https://cdn.poehali.dev/files/299c507f-f10f-4048-a927-9fa71def332e.jpg" 
                alt="Speed VPN" 
                className="w-20 h-20 rounded-full object-cover border-2 border-primary"
              />
            </a>
          </div>
          <CardTitle className="text-2xl">–í—Ö–æ–¥ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</CardTitle>
          <CardDescription>
            –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–∏—Å—å–º–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ–ø–ª–∞—Ç—ã
          </CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleLogin} className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="username">–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</Label>
              <Input
                id="username"
                type="text"
                placeholder="–í–≤–µ–¥–∏—Ç–µ username"
                value={username}
                onChange={(e) => setUsername(e.target.value)}
                disabled={loading}
                className="text-base"
              />
            </div>

            {error && (
              <div className="space-y-3">
                <div className="flex items-center gap-2 p-3 rounded-md bg-red-50 dark:bg-red-950 text-red-600 dark:text-red-400 text-sm">
                  <Icon name="AlertCircle" className="w-4 h-4" />
                  <span>{error}</span>
                </div>
                <div className="flex items-center gap-2 p-3 rounded-md bg-blue-50 dark:bg-blue-950 text-blue-600 dark:text-blue-400 text-sm">
                  <Icon name="HelpCircle" className="w-4 h-4" />
                  <span>
                    –ó–∞–±—ã–ª–∏ username?{' '}
                    <button 
                      type="button"
                      onClick={() => navigate('/get-access')}
                      className="underline font-medium hover:no-underline"
                    >
                      –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–æ—Å—Ç—É–ø –ø–æ email
                    </button>
                  </span>
                </div>
              </div>
            )}

            <Button type="submit" className="w-full" disabled={loading}>
              {loading ? (
                <>
                  <Icon name="Loader2" className="w-4 h-4 mr-2 animate-spin" />
                  –ü—Ä–æ–≤–µ—Ä–∫–∞...
                </>
              ) : (
                <>
                  <Icon name="LogIn" className="w-4 h-4 mr-2" />
                  –í–æ–π—Ç–∏
                </>
              )}
            </Button>
          </form>

          <div className="mt-6 pt-6 border-t space-y-3">
            <Button 
              variant="outline" 
              className="w-full" 
              onClick={() => navigate('/get-access')}
            >
              <Icon name="Key" className="w-4 h-4 mr-2" />
              –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ email
            </Button>
            
            <div className="text-center">
              <p className="text-sm text-muted-foreground mb-3">
                –ï—â–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?
              </p>
              <Button className="w-full button-glow" asChild>
                <a href="/register">
                  <Icon name="UserPlus" className="w-4 h-4 mr-2" />
                  –°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
                </a>
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default Login;