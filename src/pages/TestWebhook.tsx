import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";

const TestWebhook = () => {
  const { toast } = useToast();
  const [testing, setTesting] = useState(false);
  const [logs, setLogs] = useState<string[]>([]);

  const addLog = (msg: string) => {
    setLogs(prev => [...prev, `${new Date().toLocaleTimeString()}: ${msg}`]);
  };

  const handleTestWebhook = async () => {
    setTesting(true);
    setLogs([]);
    
    try {
      const username = `test_${Date.now()}`;
      addLog(`–°–æ–∑–¥–∞—é webhook –¥–ª—è ${username}`);
      
      const webhook = {
        type: 'notification',
        event: 'payment.succeeded',
        object: {
          id: `test_${Date.now()}`,
          status: 'succeeded',
          amount: { value: '1.00', currency: 'RUB' },
          metadata: {
            username,
            plan_days: '1',
            plan_name: 'Test'
          },
          receipt: { customer: { email: 'test@test.com' } }
        }
      };
      
      addLog('–û—Ç–ø—Ä–∞–≤–ª—è—é webhook...');
      
      const res = await fetch('https://functions.poehali.dev/1cd4e8c8-3e41-470f-a824-9c8dd42b6c9c', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(webhook)
      });
      
      addLog(`–û—Ç–≤–µ—Ç: ${res.status} ${res.statusText}`);
      
      const data = await res.json();
      addLog(`–î–∞–Ω–Ω—ã–µ: ${JSON.stringify(data, null, 2)}`);
      
      toast({
        title: res.ok ? '‚úÖ Webhook –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω' : '‚ùå –û—à–∏–±–∫–∞',
        description: `Username: ${username}. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏ backend/payment`
      });
    } catch (e) {
      addLog(`–û–®–ò–ë–ö–ê: ${e}`);
      toast({ title: '‚ùå –û—à–∏–±–∫–∞', description: String(e), variant: 'destructive' });
    } finally {
      setTesting(false);
    }
  };

  return (
    <div className="min-h-screen bg-background p-8">
      <div className="max-w-4xl mx-auto space-y-6">
        <Card>
          <CardHeader>
            <CardTitle>üß™ –¢–µ—Å—Ç Webhook –ÆKassa</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <p className="text-muted-foreground">
              –≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–ª–∞—Ç—ë–∂ –æ—Ç –ÆKassa –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Remnawave
            </p>
            
            <Button 
              onClick={handleTestWebhook} 
              disabled={testing}
              size="lg"
              className="w-full"
            >
              {testing ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π webhook"}
            </Button>
            
            {logs.length > 0 && (
              <div className="bg-black/50 p-4 rounded-lg font-mono text-sm space-y-1">
                {logs.map((log, i) => (
                  <div key={i} className="text-green-400">{log}</div>
                ))}
              </div>
            )}
            
            <div className="pt-4 border-t">
              <h3 className="font-bold mb-2">–ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å:</h3>
              <ul className="space-y-2 text-sm text-muted-foreground">
                <li>1. –õ–æ–≥–∏ backend/payment - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å print –ª–æ–≥–∏</li>
                <li>2. Remnawave - –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</li>
                <li>3. –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 30 GB</li>
                <li>4. –î–∞—Ç–∞ expire - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–≤—Ç—Ä–∞</li>
              </ul>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default TestWebhook;
